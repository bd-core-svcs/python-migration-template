# Default values for ${{ values.name }}
replicaCount: 1

image:
  repository: ghcr.io/bd-core-svcs/${{ values.name }}
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: ${{ values.port }}

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: ${{ values.url }}.${{ values.domain }}
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ${{ values.name }}-tls
      hosts:
        - ${{ values.url }}.${{ values.domain }}

resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application configuration
config:
  environment: production
  logLevel: INFO
  
  # LiteLLM configuration
  litellm:
    masterKey: "changeme-production-key"
    
  # Azure OpenAI
  azure:
    apiBase: ""
    apiKey: ""
    apiVersion: "2024-02-15-preview"
    
  # AWS Bedrock
  aws:
    accessKeyId: ""
    secretAccessKey: ""
    region: "us-east-1"
    
  # OpenAI (fallback)
  openai:
    apiKey: ""

{%- if values.enablePostgreSQL %}
# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "changeme-postgres-password"
    database: ${{ values.name }}
  primary:
    persistence:
      enabled: true
      size: 10Gi
{%- endif %}

{%- if values.enableRedis %}
# Redis configuration  
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme-redis-password"
  master:
    persistence:
      enabled: true
      size: 5Gi
{%- endif %}

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
