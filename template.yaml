apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-service-migration
  title: Python Migration (Cross-Organization)
  description: Migrate an existing Python service repository from one GitHub organization to another with Python-specific CI/CD setup
  tags:
    - migration
    - cross-org
    - repository
    - github
    - python
    - llm-service
    - ci-cd
  annotations:
    backstage.io/techdocs-ref: dir:.
    github.com/project-slug: blackduck-common/platform-devportal
spec:
  type: migration
  owner: platform-team
  parameters:
    - title: Migration Information
      properties:
        techStack:
          title: Tech Stack
          type: string
          description: Technology stack for this migration
          default: 'Python'
          enum:
            - 'Python'
          ui:readonly: true
          ui:help: 'This template is specifically for Python repository migrations'
    
    - title: Source Repository Information
      required:
        - sourceRepoUrl
        - description
        - owner
      properties:
        sourceRepoUrl:
          title: Source Repository URL
          type: string
          description: The GitHub repository URL to migrate from (e.g., https://github.com/SIG-Innovation-Zone/service-llm)
          pattern: '^https://github\.com/[^/]+/[^/]+/?$'
          ui:autofocus: true
          ui:help: 'Full GitHub repository URL including https://github.com/'
        description:
          title: Description
          type: string
          description: Description of the Python service being migrated
          default: 'Migration from SIG-Innovation-Zone'
        owner:
          title: Owner
          type: string
          description: Owner of the migrated service
          default: 'platform-team'

    - title: Destination Repository Information
      required:
        - destinationRepoUrl
      properties:
        destinationRepoUrl:
          title: Destination Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - bd-core-svcs
              - bd-polaris
              - blackduck-common

    - title: Migration Configuration
      properties:
        projectType:
          title: Project Type
          type: string
          description: Type of Python project being migrated
          default: 'python-service'
          enum:
            - 'python-service'
            - 'llm-gateway'
            - 'api-service'
            - 'ml-service'
            - 'data-service'
            - 'web-service'
            - 'other'
        addDockerfile:
          title: Add Dockerfile
          type: boolean
          description: Generate Dockerfile if not present in source repository
          default: true
        addGitHubWorkflow:
          title: Add GitHub Workflow
          type: boolean
          description: Add CI/CD GitHub Actions workflow
          default: true
        createArgoCDConfig:
          title: Create ArgoCD Configuration
          type: boolean
          description: Create ArgoCD configuration for deployment
          default: true
        migrationNote:
          title: Migration Notes
          type: string
          description: Additional notes about this migration (optional)
          ui:widget: textarea

  steps:
    - id: fetch-source
      name: Fetch Source Repository
      action: fetch:template
      input:
        url: ${{ parameters.sourceRepoUrl }}
        targetPath: '.'
        # Copy all files from source repository without template processing
        copyWithoutRender: 
          - '**/*'
        # Use GitHub integration for SIG-Innovation-Zone
        # The GitHub App bd-migration-reader handles authentication automatically

    - id: create-github-workflow
      name: Create GitHub Workflow
      action: fs:write
      input:
        path: '.github/workflows/build-IZ.yml'
        content: |
          name: ${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}
          on:
            push:
              branches: [ main, develop, feature/* ]
            pull_request:
              branches: [ main, develop ]
            repository_dispatch:
              types: [build]
            schedule:
              - cron: '0 6 * * 0' # 6am UTC = 11pm PST / 11:30 IST on Sundays redeploy to stay up to date with main:latest

          permissions:
            contents: read
            id-token: write
            packages: write

          jobs:
            build-and-deploy:
              name: Build and Deploy
              runs-on: ubuntu-latest
              
              steps:
                - name: Checkout code
                  uses: actions/checkout@v4
                  with:
                    ref: ${{ github.head_ref }}
                    fetch-depth: 0

                - name: Set up Docker Buildx
                  uses: docker/setup-buildx-action@v3

                - name: Authenticate to Google Cloud
                  uses: google-github-actions/auth@v2
                  with:
                    workload_identity_provider: projects/736458129177/locations/global/workloadIdentityPools/github-actions-pool-v1alpha1/providers/github-provider-v1alpha1
                    service_account: sa-gha-core-svcs@sig-innovation-zone-prd.iam.gserviceaccount.com

                - name: Configure Docker for GAR
                  run: |
                    gcloud auth configure-docker us-docker.pkg.dev

                - name: Extract metadata for Docker
                  id: meta
                  uses: docker/metadata-action@v5
                  with:
                    images: us-docker.pkg.dev/cloudops-artifacts-prd/core-svcs/${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}-poc-idp
                    tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

                - name: Build and push Docker image
                  id: build
                  uses: docker/build-push-action@v5
                  with:
                    context: .
                    file: build/docker/Dockerfile
                    push: true
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}
                    cache-from: type=gha
                    cache-to: type=gha,mode=max

                - name: Upload Docker artifact
                  uses: actions/upload-artifact@v4
                  with:
                    name: ${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}-docker-info
                    path: |
                      build/docker/Dockerfile
                      docker-compose.yaml
                    retention-days: 7

    - id: create-dependabot
      name: Create Dependabot Configuration
      action: fs:write
      input:
        path: '.github/dependabot.yml'
        content: |
          version: 2
          updates:
            - package-ecosystem: "github-actions"
              directory: "/"
              schedule:
                interval: "weekly"
              open-pull-requests-limit: 10

    - id: create-catalog-info
      name: Create catalog-info.yaml for Python service
      action: catalog:write
      input:
        filePath: 'catalog-info.yaml'
        entity:
          apiVersion: backstage.io/v1alpha1
          kind: Component
          metadata:
            name: ${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}
            description: ${{ parameters.description }}
            annotations:
              github.com/project-slug: ${{ parameters.destinationRepoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}
          spec:
            type: service
            lifecycle: experimental
            owner: ${{ parameters.owner }}

    - id: fetch-argocd-config
      name: Fetch ArgoCD Config Templates
      condition: ${{ parameters.createArgoCDConfig }}
      action: fetch:template
      input:
        url: ./argocd-config
        targetPath: 'argocd-config'
        values:
          name: ${{ parameters.destinationRepoUrl | parseRepoUrl | pick('repo') }}

    - id: publish
      name: Create and Publish to Destination
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'Migrated Python service from ${{ parameters.sourceRepoUrl }} - ${{ parameters.description }}'
        repoUrl: ${{ parameters.destinationRepoUrl }}
        defaultBranch: main
        gitCommitMessage: 'Initial migration from ${{ parameters.sourceRepoUrl }}'
        gitAuthorName: 'Backstage Migration'
        gitAuthorEmail: 'migration@backstage.io'
        topics:
          - migrated
          - ${{ parameters.projectType }}
          - backstage-migrated

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
        optional: true

    - id: create-argocd-config-pr
      name: Create ArgoCD Configuration PR
      condition: ${{ parameters.createArgoCDConfig }}
      action: publish:github:pull-request
      input:
        allowedHosts: ['github.com']
        description: 'Add ArgoCD configuration for migrated service ${{ parameters.destinationRepoUrl | parseRepoUrl | pick("repo") }}'
        repoUrl: 'github.com?owner=${{ parameters.destinationRepoUrl | parseRepoUrl | pick("owner") }}&repo=argo-config'
        branchName: 'add-argocd-config-${{ parameters.destinationRepoUrl | parseRepoUrl | pick("repo") }}'
        title: 'Add ArgoCD configuration for ${{ parameters.destinationRepoUrl | parseRepoUrl | pick("repo") }} (migrated)'
        sourcePath: 'argocd-config'
        targetPath: '${{ parameters.destinationRepoUrl | parseRepoUrl | pick("repo") }}'

    - id: migration-summary
      name: Migration Summary
      action: debug:log
      input:
        message: |
          🎉 Python Service migration completed successfully!
          
          ✅ **Migration Details:**
          - **Source**: ${{ parameters.sourceRepoUrl }}
          - **Destination**: ${{ steps.publish.output.remoteUrl }}
          - **Service Type**: ${{ parameters.serviceType }}
          - **Python Version**: ${{ parameters.pythonVersion }}
          - **Framework**: ${{ parameters.framework }}
          
          ✅ **What was created:**
          1. **Migrated Repository**: ${{ steps.publish.output.remoteUrl }}
          2. **ArgoCD Configuration PR**: Check `${{ parameters.destinationRepoUrl | parseRepoUrl | pick("owner") }}/argo-config` for PR (if enabled)
          3. **Python GitHub Workflow**: CI/CD pipeline added (if enabled)
          4. **Updated Dockerfile**: Configured for new organization (if enabled)
          5. **Database Support**: PostgreSQL/Redis configurations preserved (if detected)
          6. **Documentation**: MkDocs setup maintained (if detected)
          
          ✅ **Python Service Features:**
          - ✅ Complete source code migration
          - ✅ Python-specific CI/CD pipeline
          - ✅ Container support with updated Dockerfile
          - ✅ ArgoCD deployment configuration
          - ✅ Database and Redis configurations preserved
          - ✅ Documentation setup maintained
          
          ⚠️ **Important Notes:**
          - Source repository remains unchanged
          - Review and customize generated files as needed
          - Update environment variables for new organization
          - Merge ArgoCD configuration PR to enable deployment
          - Update any hardcoded references to new organization
          - Verify database connection strings and Redis configurations
          
          📝 **Migration Notes:**
          ${{ parameters.migrationNotes || "No additional notes provided" }}

  output:
    links:
      - title: Migrated Python Service Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Source Repository
        url: ${{ parameters.sourceRepoUrl }}
      - title: View ArgoCD Config PR
        url: 'https://github.com/${{ parameters.destinationRepoUrl | parseRepoUrl | pick("owner") }}/argo-config/pulls'